generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int                 @id @default(autoincrement())
  full_name          String
  password           String
  email              String              @unique
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
  user_project_roles user_project_role[]
  time_records       time_record[]
  colaborator        time_record_justification[] @relation("colaborator_fk")
  project_manager    time_record_justification[] @relation("project_manager_fk")
}

model project {
  id               Int                 @id @default(autoincrement())
  project_name             String      @unique
  location_required        Boolean
  location                 String?
  timezone                 String
  commercial_time_required Boolean
  commercial_time_start    Int?
  commercial_time_end      Int?
  created_at               DateTime            @default(now())
  updated_at               DateTime            @default(now())
  user_project_roles       user_project_role[]
  time_records             time_record[]
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum TimeRecordJustificationStatus {
  APPROVED
  DENIED
  PENDING
}

model user_project_role {
  id Int      @id @default(autoincrement())
  user_id              Int
  project_id           Int
  role                 UserRole
  hours_per_week       Int
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  user                 user     @relation(fields: [user_id], references: [id])
  project              project  @relation(fields: [project_id], references: [id])

  @@unique([user_id, project_id]) // A single user record per project
}

model time_record {
  id      Int                @id @default(autoincrement())
  user_id             Int
  project_id          Int
  check_in_timestamp  DateTime           @default(now())
  check_out_timestamp DateTime?
  location            String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @default(now())
  user                user               @relation(fields: [user_id], references: [id])
  project             project            @relation(fields: [project_id], references: [id])
}

model absense_document {
  id Int         @id @default(autoincrement())
  document_file       Bytes
  file_name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  time_record_justification time_record_justification[] @relation("absense_document_fk")
}


model time_record_justification {
  id Int @id @default(autoincrement())
  colaborator_id Int @unique()
  project_manager_id Int @unique()
  absense_document_id Int 
  user_message        String?
  updated_check_in_timestamp DateTime?
  updated_check_out_timestamp DateTime?
  updated_location String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
  colaborator user @relation("colaborator_fk", fields: [colaborator_id], references: [id])
  project_manager user @relation("project_manager_fk",fields: [project_manager_id], references: [id])
  absense_document absense_document @relation("absense_document_fk", fields: [absense_document_id], references: [id])
}

