generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum JustificationReviewStatus {
  APPROVED
  PENDING
  DENIED
  CANCELLED
}

enum JustificationType {
  CHECKIN
  CHECKOUT
}

model user {
  user_id                 Int                         @id @default(autoincrement())
  cpf                     String                      @unique
  email                   String                      @unique
  full_name               String
  password                String
  created_at              DateTime                    @default(now())
  updated_at              DateTime                    @default(now())
  projects                project[]
  user_project_roles      user_project_role[]
  time_records            time_record[]
  user_justifications     time_record_justification[] @relation(name: "time_record_justification_user_fk")
  reviewer_justifications time_record_justification[] @relation(name: "time_record_justification_reviewer_fk")
}

model project {
  project_id                Int                         @id @default(autoincrement())
  project_name              String                      @unique
  project_description       String                      @default("")
  owner_id                  Int
  location_required         Boolean
  location                  String?
  timezone                  String
  commercial_time_required  Boolean
  commercial_time_start     Int?
  commercial_time_end       Int?
  users_count               Int                         @default(0)
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @default(now())
  owner                     user                        @relation(fields: [owner_id], references: [user_id], onDelete: Cascade)
  user_project_roles        user_project_role[]
  time_records              time_record[]
  time_record_justification time_record_justification[]
}

model user_project_role {
  user_project_role_id Int      @id @default(autoincrement())
  user_id              Int
  project_id           Int
  role                 UserRole
  hours_per_week       Int
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  open_check_in        Boolean  @default(false)
  user                 user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  project              project  @relation(fields: [project_id], references: [project_id], onDelete: Cascade)

  @@unique([user_id, project_id]) // A single user record per project
}

model time_record {
  time_record_id            Int                         @id @default(autoincrement())
  user_id                   Int
  project_id                Int
  check_in_timestamp        DateTime                    @default(now())
  check_out_timestamp       DateTime?
  location                  String?
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @default(now())
  user                      user                        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  project                   project                     @relation(fields: [project_id], references: [project_id])
  time_record_justification time_record_justification[]
}

model time_record_justification {
  justification_id       Int                       @id @default(autoincrement())
  time_record_id         Int
  project_id             Int
  user_id                Int
  reviewer_id            Int?
  status                 JustificationReviewStatus
  user_message           String?
  reviewer_message       String?
  justification_type     JustificationType
  justification_document justification_document?
  created_at             DateTime                  @default(now())
  updated_at             DateTime                  @default(now())
  user                   user                      @relation(name: "time_record_justification_user_fk", fields: [user_id], references: [user_id])
  reviewer               user?                     @relation(name: "time_record_justification_reviewer_fk", fields: [reviewer_id], references: [user_id])
  time_record            time_record               @relation(fields: [time_record_id], references: [time_record_id])
  project                project                   @relation(fields: [project_id], references: [project_id])

  @@unique([justification_id, reviewer_id])
  @@unique([time_record_id, justification_type])
}

model justification_document {
  justification_document_id Int                       @id @default(autoincrement())
  justification_id          Int                       @unique()
  file_name                 String
  document_file             Bytes
  created_at                DateTime                  @default(now())
  updated_at                DateTime                  @default(now())
  time_record_justification time_record_justification @relation(fields: [justification_id], references: [justification_id])
}