generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum TimeRecordJustificationStatus {
  APPROVED
  PENDING
  DENIED
  CANCELLED
}

enum JustificationType {
  CHECKIN
  CHECKOUT
}

model user {
  user_id                     Int                         @id @default(autoincrement())
  cpf                         Int                         @unique
  email                       String                      @unique
  full_name                   String
  password                    String
  created_at                  DateTime                    @default(now())
  updated_at                  DateTime                    @default(now())
  user_project_roles          user_project_role[]
  time_records                time_record[]
  time_records_justifications time_record_justification[] @relation(name: "time_record_justification_user_colaborator_fk")
  time_record_justifications  time_record_justification?  @relation(name: "time_record_justification_user_reviewer_fk")
}

model project {
  project_id                  Int                         @id @default(autoincrement())
  project_name                String                      @unique
  location_required           Boolean
  location                    String?
  timezone                    String
  commercial_time_required    Boolean
  commercial_time_start       Int?
  commercial_time_end         Int?
  created_at                  DateTime                    @default(now())
  updated_at                  DateTime                    @default(now())
  user_project_roles          user_project_role[]
  time_records                time_record[]
  time_records_justifications time_record_justification[]
}

model user_project_role {
  user_project_role_id Int      @id @default(autoincrement())
  user_id              Int
  project_id           Int
  role                 UserRole
  hours_per_week       Int
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  user                 user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  project              project  @relation(fields: [project_id], references: [project_id])

  @@unique([user_id, project_id]) // A single user record per project
}

model time_record {
  time_record_id            Int                         @id @default(autoincrement())
  user_id                   Int
  project_id                Int
  check_in_timestamp        DateTime                    @default(now())
  check_out_timestamp       DateTime?
  location                  String?
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @default(now())
  user                      user                        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  project                   project                     @relation(fields: [project_id], references: [project_id])
  absense_documents         absense_document[]
  time_record_justification time_record_justification[]
}

model absense_document {
  absense_document_id Int      @id @default(autoincrement())
  document_file       Bytes
  file_name           String
  justification_id    Int      @unique()
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  time_record_id      Int?

  time_record               time_record?              @relation(fields: [time_record_id], references: [time_record_id])
  time_record_justification time_record_justification @relation(fields: [justification_id], references: [justification_id])
}

model time_record_justification {
  justification_id   Int                           @id @default(autoincrement())
  colaborator_id     Int
  reviewer_id        Int?                          @unique()
  project_id         Int
  time_record_id     Int
  status             TimeRecordJustificationStatus
  user_message       String?
  manager_message    String?
  justification_type JustificationType
  timestamp          DateTime
  updated_location   String?
  absense_document   absense_document?
  created_at         DateTime                      @default(now())
  updated_at         DateTime                      @default(now())
  colaborator        user                          @relation(name: "time_record_justification_user_colaborator_fk", fields: [colaborator_id], references: [user_id])
  reviewer           user?                         @relation(name: "time_record_justification_user_reviewer_fk", fields: [reviewer_id], references: [user_id])
  project            project                       @relation(fields: [project_id], references: [project_id])
  time_record        time_record                   @relation(fields: [time_record_id], references: [time_record_id])

  @@unique([justification_id, reviewer_id])
  @@unique([justification_id, time_record_id])
}
